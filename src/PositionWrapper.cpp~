#include "PositionWrapper.hpp"

void PositionWrapper::computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud, vector< vector<double> >& features)
{	
	//copy features to the output vector
	for(int i=0; i<cloud->points.size(); i++)
	{
		vector<double> desc;
		desc.push_back(cloud->points[i].x);
		desc.push_back(cloud->points[i].y);
		desc.push_back(cloud->points[i].z);
		features.push_back(desc);
	}
}

void PositionWrapper::computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud,  pcl::PointCloud<pcl::Normal>::Ptr& normals, vector< vector<double> >& features)
{
	//copy features to the output vector
	for(int i=0; i<cloud->points.size(); i++)
	{
		vector<double> desc;
		desc.push_back(cloud->points[i].x);
		desc.push_back(cloud->points[i].y);
		desc.push_back(cloud->points[i].z);
		features.push_back(desc);
	}
}
