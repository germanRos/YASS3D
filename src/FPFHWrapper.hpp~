#ifndef _FPFH_WRAPPER_HPP_
	#define _FPFH_WRAPPER_HPP_

	#include "LocalFeature.hpp"
	#include <pcl/features/fpfh.h>
	#include <pcl/features/normal_3d.h>

	class FPFHWrapper : public LocalFeature
	{
		public:
			FPFHWrapper(double radiusNormal=0.1, double radiusFPFH = 0.25)
			{
				this->radiusNormal = radiusNormal;
				this->radiusFPFH = radiusFPFH;
			}

			void computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud, vector< vector<double> >& features);

			void computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud,  pcl::PointCloud<pcl::Normal>::Ptr& normals, vector< vector<double> >& features);
			

		private:
			double radiusNormal;
			double radiusFPFH;

			pcl::FPFHEstimation<pcl::PointXYZRGB, pcl::Normal, pcl::FPFHSignature33> fpfh_estimation;

	};
#endif
