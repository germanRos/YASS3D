#include "ColorNWrapper.hpp"

void ColorNWrapper::computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud, vector< vector<double> >& features)
{	
	//copy features to the output vector
	for(int i=0; i<cloud->points.size(); i++)
	{
		vector<double> desc;
		PointXYZRGB pt = cloud->points[i];
		double norm = sqrt(double(pt.r)*double(pt.r) + double(pt.g)*double(pt.g) + double(pt.b)*double(pt.b));
		desc.push_back(double(pt.r) / norm);
		desc.push_back(double(pt.g) / norm);
		desc.push_back(double(pt.b) / norm);
		features.push_back(desc);
	}
}

void ColorNWrapper::computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud,  pcl::PointCloud<pcl::Normal>::Ptr& normals, vector< vector<double> >& features)
{
	//copy features to the output vector
	for(int i=0; i<cloud->points.size(); i++)
	{
		vector<double> desc;
		PointXYZRGB pt = cloud->points[i];
		double norm = sqrt(double(pt.r)*double(pt.r) + double(pt.g)*double(pt.g) + double(pt.b)*double(pt.b));
		desc.push_back(double(pt.r) / norm);
		desc.push_back(double(pt.g) / norm);
		desc.push_back(double(pt.b) / norm);
		features.push_back(desc);
	}
}
