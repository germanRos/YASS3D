#include "FPFHWrapper.hpp"

void FPFHWrapper::computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud, vector< vector<double> >& features)
{
	pcl::PointCloud<pcl::Normal>::Ptr normals(new pcl::PointCloud<pcl::Normal>);
	pcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);
	computeNormals(cloud, radiusNormal, normals, tree);

	// Provide the original point cloud (without normals)
	fpfh_estimation.setInputCloud(cloud);
	// Provide the point cloud with normals
	fpfh_estimation.setInputNormals(normals);
	// fpfhEstimation.setInputWithNormals(cloud, cloudWithNormals); PFHEstimation does not have this function
	// Use the same KdTree from the normal estimation
	fpfh_estimation.setSearchMethod(tree);
	//pcl::PointCloud<pcl::FPFHSignature33>::Ptr pfh_features (new pcl::PointCloud<pcl::FPFHSignature33>);
	pcl::PointCloud<pcl::FPFHSignature33>::Ptr pfh_features (new pcl::PointCloud<pcl::FPFHSignature33>);
	fpfh_estimation.setRadiusSearch (radiusFPFH);

	// Actually compute the spin images
	fpfh_estimation.compute (*pfh_features);

	for(int v=0; v<pfh_features->size(); v++)
	{
		vector<double> desc;
		for(int i=0; i<33; i++)
			desc.push_back(pfh_features->at(v).histogram[i]);
		features.push_back(desc);
	}
}
void FPFHWrapper::computeFeature(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud,  pcl::PointCloud<pcl::Normal>::Ptr& normals, vector< vector<double> >& features)
{

}
